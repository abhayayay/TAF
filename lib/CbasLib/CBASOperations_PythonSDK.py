"""
created on Feb 26, 2024
"""
import couchbase
from couchbase import options as op
from couchbase.logic.options import OptionsTimeoutBase
from couchbase.options import AnalyticsOptions
from couchbase.exceptions import CouchbaseException
from couchbase.logic import analytics
from datetime import timedelta
from global_vars import logger


class CBASHelper:
    def __init__(self, cluster):
        self.cluster = cluster
        self.sdk_client_pool = cluster.sdk_client_pool
        self.log = logger.get("infra")

    def execute_statement_on_cbas(
            self, statement, mode, pretty=True, timeout=300,
            client_context_id=None, username=None, password=None,
            analytics_timeout=300, time_out_unit="s",
            scan_consistency=None, scan_wait=None):

        client = self.sdk_client_pool.get_cluster_client(self.cluster)

        options = op.AnalyticsOptions()

        # set the read-only to false
        # set timeout
        option_parameters = {"read_only": False, "timeout": timedelta(analytics_timeout)}

        # set scan_consistency
        if scan_consistency and scan_consistency != "not_bounded":
            option_parameters["scan_consistency"] = analytics.AnalyticsScanConsistency.NOT_BOUNDED
        else:
            option_parameters["scan_consistency"] = analytics.AnalyticsScanConsistency.REQUEST_PLUS

        if client_context_id:
            option_parameters["client_context_id"] = client_context_id

        option_parameters["raw"] = dict()
        if mode:
            option_parameters["raw"]["mode"] = mode

        option_parameters["raw"]["pretty"] = pretty

        options.update(option_parameters)

        output = {}
        statement = "create collection aaliya Primary Key(id: UUID)AUTOGENERATED"
        # try:
        #     result = client.cluster.analytics_query(statement, options)
        #     answer = result.rows()
        #     self.log.info(answer)
        # except Exception as err:
        #     print("Error: {}".format(str(err)))
        try:
            result = client.cluster.analytics_query("SELECT 'hello' AS greeting")

            for row in result.rows():
                print("Found row: {}".format(row))

            print("Reported execution time: {}".format(
                result.metadata().metrics().execution_time()))

        except CouchbaseException as ex:
            import traceback
            traceback.print_exc()